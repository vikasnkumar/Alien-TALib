use strict;
use warnings;
use alienfile;
use Path::Tiny qw(path);

### let's probe by compiling the code. on FreeBSD force the download and build
### the latest code since the pkg version is old
if ($^O !~ /freebsd|openbsd|netbsd/i) {
plugin 'Probe::CBuilder' => (
    lang => 'C',
    cflags => $ENV{TALIB_INCLUDES} ? "-I$ENV{TALIB_INCLUDES}": "",
    libs => $ENV{TALIB_LIBDIRS} ? "-L$ENV{TALIB_LIBDIRS} -lta_lib -lm" : "-lta_lib -lm",
    program => <<'EOF');
#include <ta-lib/ta_libc.h>
int main(int argc, char **argv)
{
  TA_Initialize();
  TA_Shutdown();
  return 0;
}
EOF
}

share {
    my $REV = '1562';
    start_url "https://sourceforge.net/code-snapshots/svn/t/ta/ta-lib/code/ta-lib-code-r${REV}-trunk.zip";
    plugin 'Download';
    meta->before_hook( download => sub {
        my $build = shift;
        my $tries = 0;
        my $max_tries = 3;
        my $http = HTTP::Tiny->new;
        my $response;

        while( $tries++ < $max_tries ) {
            $build->log("Requesting snapshot r${REV}: attempt $tries/$max_tries");
            # Need to request snapshot first.
            $response = $http->post(
                "https://sourceforge.net/p/ta-lib/code/$REV/tarball",
                {
                    headers => {
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'Referer'      => "https://sourceforge.net/p/ta-lib/code/$REV/tree/trunk/",
                    },
                    content => 'path=%2Ftrunk',
                },
            );
            unless($response->{success}) {
                $build->log("Request attempt not successful");
                sleep $tries * 4; # wait a bit before requesting again
                next;
            } else {
                $build->log("Request attempt successful");
            }

            sleep $tries * 4; # wait a bit before trying the .zip file

            $build->log("Checking that .zip is available after request");
            $response = $http->head( meta->{prop}{start_url} );
            if( $response->{success} ) {
                $build->log("The .zip is available now");
                last;
            } else {
                $build->log("The .zip is not yet available");
            }
        }

        unless ($response->{success}) {
            print "HTTP Response: " . $response->{status} .
                  " Reason: " . $response->{reason} . "\n";
            die "Could not request snapshot from $response->{url}";
        }
    });
    plugin 'Extract' => 'zip';
    plugin 'Build::CMake';
    build [
        # this is the default build step, if you do not specify one.
        [ '%{cmake}',
            @{ meta->prop->{plugin_build_cmake}->{args} },
            # ... put extra cmake args here ...
            '%{.install.extract}/ta-lib/'
        ],
        '%{make}',
        '%{make} install',
    ];
    plugin 'Gather::IsolateDynamic';
    ## lifted from alien-libdeflate
    after gather => sub {
        my $build = shift;
        my $prefix = path($build->install_prop->{prefix})->absolute;

        # for MSWin32 which creates a 'libta_lib_a.a' by default
        my $static_libta_lib_a = $prefix->child( 'lib', 'libta_lib_a.a' );
        my $static_libta_lib   = $prefix->child( 'lib', 'libta_lib.a'   );
        if( -f $static_libta_lib_a && ! -f $static_libta_lib ) {
            $build->log("move " . join(" => ", map $_->relative($prefix),
                $static_libta_lib_a,
                $static_libta_lib
            ));
            $static_libta_lib_a->move( $static_libta_lib );
        }

        my $lib = $prefix->child('lib')->stringify;
        my $include = $prefix->child('include');
        ## handle pre-installed TA-lib 0.4 and self built TA-lib 0.6
        my $include2 = $prefix->child('include', 'ta-lib');
        my $dynamic = $prefix->child('dynamic');
        $build->runtime_prop->{cflags} = "-I$include -I$include2";
        $build->runtime_prop->{libs} = "-L$dynamic -lta_lib -lm";
        $build->runtime_prop->{libs_static} = "-L$lib -lta_lib -lm";
        $build->runtime_prop->{inline_auto_include} = [ 'ta_libc.h' ];
    };
};
